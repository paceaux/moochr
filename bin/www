#!/usr/bin/env node

const { config } = require('../package.json');

const app = require('../app');
const http = require('http');
const fs = require('fs');
const path = require('path');
const https = require('https');
const debug = require('debug')('http'); // todo: figure out how the hell to use debug

const { ports } = config;
const sslKeyPath = 'ssl/localhost.key';
const sslCertificatePath = 'ssl/localhost.crt';

const options = {
    key: fs.readFileSync(path.resolve(process.cwd(), sslKeyPath)),
    cert: fs.readFileSync(path.resolve(process.cwd(), sslCertificatePath)),
    requestCert: false,
    rejectUnauthorized: false,
};

function listeningReporter() {
    const { address, port } = this.address();
    const protocol = this.addContext ? 'https' : 'http';
    const realAdd = address === '::' ? 'localhost' : address;

    debug(`Listening on ${protocol}://${realAdd}:${port}...`);
    console.log(`Listening on ${protocol}://${realAdd}:${port}...`);
}

function onError(error) {
    if (error.syscall !== 'listen') throw error;

    const { port } = this.address();

    switch (error.code) {
    case 'EACCES':
        console.log(`${port}  requires elevated privileges`);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.log(`${port} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

const server = http
    .createServer(app.callback())
    .listen(ports.http);
const securedServer = https
    .createServer(options, app.callback())
    .listen(ports.https);

/*
todo:
figure out how to get http to redirect to https
alternatively, set this to always be https
*/

server.listen(ports.http);
server.on('error', onError);
server.on('listening', listeningReporter);

securedServer.listen(ports.https);
securedServer.on('error', onError);
securedServer.on('listening', listeningReporter);

