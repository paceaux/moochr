#!/usr/bin/env node

/**
 * Module dependencies.
 */
const { config } = require('../package.json');

const app = require('../app');
const debug = require('debug')('node-postgres-todo:server');
const http = require('http');
const fs = require('fs');
const path = require('path');
const https = require('https');

const { ports } = config;
const sslKeyPath = 'ssl/localhost.key';
const sslCertificatePath = 'ssl/localhost.crt';

const options = {
    key: fs.readFileSync(path.resolve(process.cwd(), sslKeyPath)),
    cert: fs.readFileSync(path.resolve(process.cwd(), sslCertificatePath)),
    requestCert: false,
    rejectUnauthorized: false
};

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback()).listen(ports.http);
const securedServer = https.createServer(options, app.callback()).listen(ports.https);

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(ports.http);
server.on('error', onError);
server.on('listening', onListening);

securedServer.listen(ports.https);
securedServer.on('error', onError);
securedServer.on('listening', onListening);

